import pandas as pd
import numpy as np
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

st.title("üå≥ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Decision Tree")

# ----------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß + ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
# ----------------------------
col1, col2 = st.columns(2)
with col1:
    st.header("")
    st.image("./img/b2.jpg")
with col2:
    st.header("")
    st.image("./img/b4.jpg")

# ----------------------------
# ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
# ----------------------------
html_1 = """
<div style="background-color:#33beff;padding:15px;
            border-radius:15px 15px 15px 15px;
            border-style:'solid';border-color:black">
<center><h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢</h4></center>
</div>
"""
st.markdown(html_1, unsafe_allow_html=True)
st.markdown("")

# ----------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
dt = pd.read_csv("./data/Diabetes.csv")

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Yes/No, Male/Female, Positive/Negative ‡πÄ‡∏õ‡πá‡∏ô 1/0
dt = dt.replace({
    'Yes': 1, 'No': 0,
    'Male': 1, 'Female': 0,
    'Positive': 1, 'Negative': 0
})

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å 10 ‡πÅ‡∏ñ‡∏ß")
st.write(dt.head(10))

st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 10 ‡πÅ‡∏ñ‡∏ß")
st.write(dt.tail(10))

# ----------------------------
# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
# ----------------------------
st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.write(dt.describe())

# ----------------------------
# ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ----------------------------
st.subheader("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
feature = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", dt.columns[:-1])

# Boxplot
st.write(f"### üéØ Boxplot: {feature} ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô")
fig, ax = plt.subplots()
sns.boxplot(data=dt, x='class', y=feature, ax=ax)
plt.tight_layout()
st.pyplot(fig)

# Pairplot
if st.checkbox("‡πÅ‡∏™‡∏î‡∏á Pairplot (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)"):
    st.write("### üå∏ Pairplot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    fig2 = sns.pairplot(dt, hue='class')
    st.pyplot(fig2.fig)

# ----------------------------
# ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
# ----------------------------
html_2 = """
<div style="background-color:#6BD5DA;padding:15px;
            border-radius:15px 15px 15px 15px;
            border-style:'solid';border-color:black">
<center><h5>‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Decision Tree</h5></center>
</div>
"""
st.markdown(html_2, unsafe_allow_html=True)
st.markdown("")

# ‡πÅ‡∏¢‡∏Å Features / Target
X = dt.drop('class', axis=1)
y = dt['class']

# ‡πÅ‡∏ö‡πà‡∏á Train/Test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
max_depth = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Tree (max_depth)", 1, 10, 3)
dt_model = DecisionTreeClassifier(random_state=42, max_depth=max_depth)
dt_model.fit(X_train, y_train)

# ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
y_pred = dt_model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
st.metric("üìä Accuracy ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•", f"{acc:.2f}")

st.subheader("üå≥ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Decision Tree")
fig3, ax3 = plt.subplots(figsize=(12,6))
plot_tree(dt_model, feature_names=X.columns, class_names=["0","1"], filled=True, ax=ax3)
st.pyplot(fig3)



st.subheader("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô")
A1 = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏")
A2 = st.number_input("‡πÄ‡∏û‡∏® (‡∏ä‡∏≤‡∏¢=1 ‡∏´‡∏ç‡∏¥‡∏á=0)")
A3 = st.number_input("‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢ (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A4 = st.number_input("‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ô‡πâ‡∏≥ (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A5 = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A6 = st.number_input("‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A7 = st.number_input("‡∏´‡∏¥‡∏ß‡∏ö‡πà‡∏≠‡∏¢ (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A8 = st.number_input("‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÉ‡∏ô‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞‡πÄ‡∏û‡∏® (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A9 = st.number_input("‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏°‡∏±‡∏ß (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A10 = st.number_input("‡∏Ñ‡∏±‡∏ô (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A11 = st.number_input("‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î‡∏á‡πà‡∏≤‡∏¢ (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A12 = st.number_input("‡πÅ‡∏ú‡∏•‡∏´‡∏≤‡∏¢‡∏ä‡πâ‡∏≤ (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A13 = st.number_input("‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A14 = st.number_input("‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ï‡∏∂‡∏á (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A15 = st.number_input("‡∏ú‡∏°‡∏£‡πà‡∏ß‡∏á (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")
A16 = st.number_input("‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô (‡πÉ‡∏ä‡πà=1 ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà=0)")




if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•"):
    x_input = np.array([[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]])
    out = dt_model.predict(x_input)

    st.write(out)  

    if out[0] == 1:
        st.success("‚ö†Ô∏è‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (ÔΩ°≈èÔπè≈è)")
        st.image("./img/b3.jpg")
    else:
        st.success("‚úÖ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô (‚âß‚ñΩ‚â¶)")
        st.image("./img/b5.jpg")
else:
    st.write("‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
